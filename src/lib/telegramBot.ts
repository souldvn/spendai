import dotenv from 'dotenv';
import { Telegraf } from 'telegraf';
import { generateUserReport } from '@/firebaseConfig';

dotenv.config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

const token = process.env.TELEGRAM_BOT_TOKEN!;
if (!token) throw new Error('Bot token is required');

const bot = new Telegraf(token);

// –ö–æ–º–∞–Ω–¥—ã
bot.start((ctx) => {
  const webAppUrl = 'https://smartspendai.netlify.app';
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    }
  );
});

bot.command('help', (ctx) => {
  ctx.reply(`
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å
/help - –ü–æ–º–æ—â—å
/balance - –ë–∞–ª–∞–Ω—Å
/transactions - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
/report - –û—Ç—á–µ—Ç
  `);
});

bot.command('balance', (ctx) => ctx.reply('–ë–∞–ª–∞–Ω—Å: 0 ‚ÇΩ'));

bot.command('transactions', (ctx) => ctx.reply('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'));

bot.command('report', async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID.');

  try {
    const report = await generateDailyReportForUser(userId);
    await ctx.reply(report);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.');
  }
});

bot.on('message', (ctx) => {
  if ('text' in ctx.message) {
    console.log('Message:', ctx.message.text);
  }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
async function generateDailyReportForUser(userId: number) {
  return `–û—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:\n–î–æ—Ö–æ–¥: 1000 ‚ÇΩ\n–†–∞—Å—Ö–æ–¥: 500 ‚ÇΩ`;
}

bot.command('testreport', async (ctx) => {
  const userId = String(ctx.from.id);
  try {
    const report = await generateUserReport(userId, 'daily');
    await ctx.reply(report);
    console.log(`Test report sent to ${userId}`);
  } catch (error) {
    console.error('Test report failed:', error instanceof Error ? error.message : error);
    await ctx.reply('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞');
  }
});

// üëá –í–æ—Ç —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ:
export { bot };
